
ECE198.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022a8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800243c  0800243c  0001243c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002454  08002454  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002454  08002454  00012454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800245c  0800245c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800245c  0800245c  0001245c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002460  08002460  00012460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002470  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002470  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008328  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014f6  00000000  00000000  000283a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  000298a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000565  00000000  00000000  00029fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015a22  00000000  00000000  0002a50d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008a1f  00000000  00000000  0003ff2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c94e  00000000  00000000  0004894e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c0c  00000000  00000000  000d529c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d6ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002424 	.word	0x08002424

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002424 	.word	0x08002424

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fab0 	bl	8000a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f820 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f906 	bl	80006ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f8da 	bl	8000698 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004e4:	f000 f886 	bl	80005f4 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) {
 80004e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ec:	4809      	ldr	r0, [pc, #36]	; (8000514 <main+0x44>)
 80004ee:	f000 ffe1 	bl	80014b4 <HAL_GPIO_ReadPin>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d006      	beq.n	8000506 <main+0x36>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004fe:	4806      	ldr	r0, [pc, #24]	; (8000518 <main+0x48>)
 8000500:	f000 fff0 	bl	80014e4 <HAL_GPIO_WritePin>
 8000504:	e7f0      	b.n	80004e8 <main+0x18>
	  } else {
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800050c:	4802      	ldr	r0, [pc, #8]	; (8000518 <main+0x48>)
 800050e:	f000 ffe9 	bl	80014e4 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) {
 8000512:	e7e9      	b.n	80004e8 <main+0x18>
 8000514:	40020800 	.word	0x40020800
 8000518:	40020400 	.word	0x40020400

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f001 ff4e 	bl	80023cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b29      	ldr	r3, [pc, #164]	; (80005ec <SystemClock_Config+0xd0>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a28      	ldr	r2, [pc, #160]	; (80005ec <SystemClock_Config+0xd0>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b26      	ldr	r3, [pc, #152]	; (80005ec <SystemClock_Config+0xd0>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b23      	ldr	r3, [pc, #140]	; (80005f0 <SystemClock_Config+0xd4>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000568:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <SystemClock_Config+0xd4>)
 800056a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <SystemClock_Config+0xd4>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000584:	2310      	movs	r3, #16
 8000586:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000588:	2302      	movs	r3, #2
 800058a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058c:	2300      	movs	r3, #0
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000590:	2310      	movs	r3, #16
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000594:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000598:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800059a:	2304      	movs	r3, #4
 800059c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059e:	2307      	movs	r3, #7
 80005a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 ffb6 	bl	8001518 <HAL_RCC_OscConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005b2:	f000 f921 	bl	80007f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	230f      	movs	r3, #15
 80005b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ba:	2302      	movs	r3, #2
 80005bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2102      	movs	r1, #2
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fa18 	bl	8001a08 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005de:	f000 f90b 	bl	80007f8 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005fa:	463b      	mov	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000606:	4b21      	ldr	r3, [pc, #132]	; (800068c <MX_ADC1_Init+0x98>)
 8000608:	4a21      	ldr	r2, [pc, #132]	; (8000690 <MX_ADC1_Init+0x9c>)
 800060a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <MX_ADC1_Init+0x98>)
 800060e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000612:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000614:	4b1d      	ldr	r3, [pc, #116]	; (800068c <MX_ADC1_Init+0x98>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800061a:	4b1c      	ldr	r3, [pc, #112]	; (800068c <MX_ADC1_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000620:	4b1a      	ldr	r3, [pc, #104]	; (800068c <MX_ADC1_Init+0x98>)
 8000622:	2200      	movs	r2, #0
 8000624:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000626:	4b19      	ldr	r3, [pc, #100]	; (800068c <MX_ADC1_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062e:	4b17      	ldr	r3, [pc, #92]	; (800068c <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <MX_ADC1_Init+0x98>)
 8000636:	4a17      	ldr	r2, [pc, #92]	; (8000694 <MX_ADC1_Init+0xa0>)
 8000638:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_ADC1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_ADC1_Init+0x98>)
 8000642:	2201      	movs	r2, #1
 8000644:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_ADC1_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_ADC1_Init+0x98>)
 8000650:	2201      	movs	r2, #1
 8000652:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000654:	480d      	ldr	r0, [pc, #52]	; (800068c <MX_ADC1_Init+0x98>)
 8000656:	f000 fa61 	bl	8000b1c <HAL_ADC_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000660:	f000 f8ca 	bl	80007f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000664:	2300      	movs	r3, #0
 8000666:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000668:	2301      	movs	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	4619      	mov	r1, r3
 8000674:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_ADC1_Init+0x98>)
 8000676:	f000 fa95 	bl	8000ba4 <HAL_ADC_ConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000680:	f000 f8ba 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000028 	.word	0x20000028
 8000690:	40012000 	.word	0x40012000
 8000694:	0f000001 	.word	0x0f000001

08000698 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <MX_USART2_UART_Init+0x50>)
 80006a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006d0:	f001 fbba 	bl	8001e48 <HAL_UART_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006da:	f000 f88d 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000070 	.word	0x20000070
 80006e8:	40004400 	.word	0x40004400

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <MX_GPIO_Init+0xfc>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a37      	ldr	r2, [pc, #220]	; (80007e8 <MX_GPIO_Init+0xfc>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b35      	ldr	r3, [pc, #212]	; (80007e8 <MX_GPIO_Init+0xfc>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	4b31      	ldr	r3, [pc, #196]	; (80007e8 <MX_GPIO_Init+0xfc>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a30      	ldr	r2, [pc, #192]	; (80007e8 <MX_GPIO_Init+0xfc>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b2e      	ldr	r3, [pc, #184]	; (80007e8 <MX_GPIO_Init+0xfc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <MX_GPIO_Init+0xfc>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a29      	ldr	r2, [pc, #164]	; (80007e8 <MX_GPIO_Init+0xfc>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <MX_GPIO_Init+0xfc>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <MX_GPIO_Init+0xfc>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a22      	ldr	r2, [pc, #136]	; (80007e8 <MX_GPIO_Init+0xfc>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <MX_GPIO_Init+0xfc>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2120      	movs	r1, #32
 8000776:	481d      	ldr	r0, [pc, #116]	; (80007ec <MX_GPIO_Init+0x100>)
 8000778:	f000 feb4 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000782:	481b      	ldr	r0, [pc, #108]	; (80007f0 <MX_GPIO_Init+0x104>)
 8000784:	f000 feae 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000788:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_GPIO_Init+0x108>)
 80007a0:	f000 fd04 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007a4:	2320      	movs	r3, #32
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	4619      	mov	r1, r3
 80007ba:	480c      	ldr	r0, [pc, #48]	; (80007ec <MX_GPIO_Init+0x100>)
 80007bc:	f000 fcf6 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007c0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_GPIO_Init+0x104>)
 80007da:	f000 fce7 	bl	80011ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007de:	bf00      	nop
 80007e0:	3728      	adds	r7, #40	; 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020000 	.word	0x40020000
 80007f0:	40020400 	.word	0x40020400
 80007f4:	40020800 	.word	0x40020800

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
}
 80007fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000800:	e7fe      	b.n	8000800 <Error_Handler+0x8>
	...

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <HAL_MspInit+0x4c>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	4a0f      	ldr	r2, [pc, #60]	; (8000850 <HAL_MspInit+0x4c>)
 8000814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000818:	6453      	str	r3, [r2, #68]	; 0x44
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <HAL_MspInit+0x4c>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <HAL_MspInit+0x4c>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	4a08      	ldr	r2, [pc, #32]	; (8000850 <HAL_MspInit+0x4c>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000834:	6413      	str	r3, [r2, #64]	; 0x40
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_MspInit+0x4c>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000842:	2007      	movs	r0, #7
 8000844:	f000 fc7e 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800

08000854 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <HAL_ADC_MspInit+0x7c>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d127      	bne.n	80008c6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <HAL_ADC_MspInit+0x80>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	4a15      	ldr	r2, [pc, #84]	; (80008d4 <HAL_ADC_MspInit+0x80>)
 8000880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000884:	6453      	str	r3, [r2, #68]	; 0x44
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <HAL_ADC_MspInit+0x80>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <HAL_ADC_MspInit+0x80>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a0e      	ldr	r2, [pc, #56]	; (80008d4 <HAL_ADC_MspInit+0x80>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <HAL_ADC_MspInit+0x80>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008ae:	2301      	movs	r3, #1
 80008b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008b2:	2303      	movs	r3, #3
 80008b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	4805      	ldr	r0, [pc, #20]	; (80008d8 <HAL_ADC_MspInit+0x84>)
 80008c2:	f000 fc73 	bl	80011ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008c6:	bf00      	nop
 80008c8:	3728      	adds	r7, #40	; 0x28
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40012000 	.word	0x40012000
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020000 	.word	0x40020000

080008dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a19      	ldr	r2, [pc, #100]	; (8000960 <HAL_UART_MspInit+0x84>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d12b      	bne.n	8000956 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <HAL_UART_MspInit+0x88>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	4a17      	ldr	r2, [pc, #92]	; (8000964 <HAL_UART_MspInit+0x88>)
 8000908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090c:	6413      	str	r3, [r2, #64]	; 0x40
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <HAL_UART_MspInit+0x88>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <HAL_UART_MspInit+0x88>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a10      	ldr	r2, [pc, #64]	; (8000964 <HAL_UART_MspInit+0x88>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_UART_MspInit+0x88>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000936:	230c      	movs	r3, #12
 8000938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000946:	2307      	movs	r3, #7
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	4805      	ldr	r0, [pc, #20]	; (8000968 <HAL_UART_MspInit+0x8c>)
 8000952:	f000 fc2b 	bl	80011ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000956:	bf00      	nop
 8000958:	3728      	adds	r7, #40	; 0x28
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40004400 	.word	0x40004400
 8000964:	40023800 	.word	0x40023800
 8000968:	40020000 	.word	0x40020000

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <NMI_Handler+0x4>

08000972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <MemManage_Handler+0x4>

0800097e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <UsageFault_Handler+0x4>

0800098a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b8:	f000 f890 	bl	8000adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <SystemInit+0x20>)
 80009c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <SystemInit+0x20>)
 80009cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ea:	490e      	ldr	r1, [pc, #56]	; (8000a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a00:	4c0b      	ldr	r4, [pc, #44]	; (8000a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a0e:	f7ff ffd7 	bl	80009c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a12:	f001 fce3 	bl	80023dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a16:	f7ff fd5b 	bl	80004d0 <main>
  bx  lr    
 8000a1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a28:	08002464 	.word	0x08002464
  ldr r2, =_sbss
 8000a2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a30:	200000b8 	.word	0x200000b8

08000a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC_IRQHandler>
	...

08000a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <HAL_Init+0x40>)
 8000a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a48:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <HAL_Init+0x40>)
 8000a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <HAL_Init+0x40>)
 8000a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 fb6f 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a66:	2000      	movs	r0, #0
 8000a68:	f000 f808 	bl	8000a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a6c:	f7ff feca 	bl	8000804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023c00 	.word	0x40023c00

08000a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_InitTick+0x54>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_InitTick+0x58>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 fb79 	bl	8001192 <HAL_SYSTICK_Config>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e00e      	b.n	8000ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	d80a      	bhi.n	8000ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ab8:	f000 fb4f 	bl	800115a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000abc:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <HAL_InitTick+0x5c>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e000      	b.n	8000ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	20000004 	.word	0x20000004

08000adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_IncTick+0x20>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_IncTick+0x24>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <HAL_IncTick+0x24>)
 8000aee:	6013      	str	r3, [r2, #0]
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000008 	.word	0x20000008
 8000b00:	200000b4 	.word	0x200000b4

08000b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <HAL_GetTick+0x14>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	200000b4 	.word	0x200000b4

08000b1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d101      	bne.n	8000b32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e033      	b.n	8000b9a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d109      	bne.n	8000b4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff fe8a 	bl	8000854 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 0310 	and.w	r3, r3, #16
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d118      	bne.n	8000b8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b62:	f023 0302 	bic.w	r3, r3, #2
 8000b66:	f043 0202 	orr.w	r2, r3, #2
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f000 f93a 	bl	8000de8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f023 0303 	bic.w	r3, r3, #3
 8000b82:	f043 0201 	orr.w	r2, r3, #1
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	641a      	str	r2, [r3, #64]	; 0x40
 8000b8a:	e001      	b.n	8000b90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d101      	bne.n	8000bc0 <HAL_ADC_ConfigChannel+0x1c>
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	e105      	b.n	8000dcc <HAL_ADC_ConfigChannel+0x228>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b09      	cmp	r3, #9
 8000bce:	d925      	bls.n	8000c1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	68d9      	ldr	r1, [r3, #12]
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4613      	mov	r3, r2
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	4413      	add	r3, r2
 8000be4:	3b1e      	subs	r3, #30
 8000be6:	2207      	movs	r2, #7
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43da      	mvns	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	400a      	ands	r2, r1
 8000bf4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	68d9      	ldr	r1, [r3, #12]
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	689a      	ldr	r2, [r3, #8]
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	4618      	mov	r0, r3
 8000c08:	4603      	mov	r3, r0
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	4403      	add	r3, r0
 8000c0e:	3b1e      	subs	r3, #30
 8000c10:	409a      	lsls	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	430a      	orrs	r2, r1
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	e022      	b.n	8000c62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	6919      	ldr	r1, [r3, #16]
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	4413      	add	r3, r2
 8000c30:	2207      	movs	r2, #7
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43da      	mvns	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	400a      	ands	r2, r1
 8000c3e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	6919      	ldr	r1, [r3, #16]
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	689a      	ldr	r2, [r3, #8]
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	4618      	mov	r0, r3
 8000c52:	4603      	mov	r3, r0
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	4403      	add	r3, r0
 8000c58:	409a      	lsls	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	2b06      	cmp	r3, #6
 8000c68:	d824      	bhi.n	8000cb4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	4613      	mov	r3, r2
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	4413      	add	r3, r2
 8000c7a:	3b05      	subs	r3, #5
 8000c7c:	221f      	movs	r2, #31
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43da      	mvns	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	400a      	ands	r2, r1
 8000c8a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	4618      	mov	r0, r3
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4413      	add	r3, r2
 8000ca4:	3b05      	subs	r3, #5
 8000ca6:	fa00 f203 	lsl.w	r2, r0, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	635a      	str	r2, [r3, #52]	; 0x34
 8000cb2:	e04c      	b.n	8000d4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	2b0c      	cmp	r3, #12
 8000cba:	d824      	bhi.n	8000d06 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	4413      	add	r3, r2
 8000ccc:	3b23      	subs	r3, #35	; 0x23
 8000cce:	221f      	movs	r2, #31
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43da      	mvns	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	400a      	ands	r2, r1
 8000cdc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4413      	add	r3, r2
 8000cf6:	3b23      	subs	r3, #35	; 0x23
 8000cf8:	fa00 f203 	lsl.w	r2, r0, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	430a      	orrs	r2, r1
 8000d02:	631a      	str	r2, [r3, #48]	; 0x30
 8000d04:	e023      	b.n	8000d4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685a      	ldr	r2, [r3, #4]
 8000d10:	4613      	mov	r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	3b41      	subs	r3, #65	; 0x41
 8000d18:	221f      	movs	r2, #31
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	400a      	ands	r2, r1
 8000d26:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	4618      	mov	r0, r3
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685a      	ldr	r2, [r3, #4]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	3b41      	subs	r3, #65	; 0x41
 8000d42:	fa00 f203 	lsl.w	r2, r0, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d4e:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <HAL_ADC_ConfigChannel+0x234>)
 8000d50:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a21      	ldr	r2, [pc, #132]	; (8000ddc <HAL_ADC_ConfigChannel+0x238>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d109      	bne.n	8000d70 <HAL_ADC_ConfigChannel+0x1cc>
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b12      	cmp	r3, #18
 8000d62:	d105      	bne.n	8000d70 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <HAL_ADC_ConfigChannel+0x238>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d123      	bne.n	8000dc2 <HAL_ADC_ConfigChannel+0x21e>
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b10      	cmp	r3, #16
 8000d80:	d003      	beq.n	8000d8a <HAL_ADC_ConfigChannel+0x1e6>
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b11      	cmp	r3, #17
 8000d88:	d11b      	bne.n	8000dc2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b10      	cmp	r3, #16
 8000d9c:	d111      	bne.n	8000dc2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <HAL_ADC_ConfigChannel+0x23c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a10      	ldr	r2, [pc, #64]	; (8000de4 <HAL_ADC_ConfigChannel+0x240>)
 8000da4:	fba2 2303 	umull	r2, r3, r2, r3
 8000da8:	0c9a      	lsrs	r2, r3, #18
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000db4:	e002      	b.n	8000dbc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f9      	bne.n	8000db6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	40012300 	.word	0x40012300
 8000ddc:	40012000 	.word	0x40012000
 8000de0:	20000000 	.word	0x20000000
 8000de4:	431bde83 	.word	0x431bde83

08000de8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000df0:	4b79      	ldr	r3, [pc, #484]	; (8000fd8 <ADC_Init+0x1f0>)
 8000df2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	431a      	orrs	r2, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	685a      	ldr	r2, [r3, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	6859      	ldr	r1, [r3, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	021a      	lsls	r2, r3, #8
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000e40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	6859      	ldr	r1, [r3, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	430a      	orrs	r2, r1
 8000e52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6899      	ldr	r1, [r3, #8]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	68da      	ldr	r2, [r3, #12]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	430a      	orrs	r2, r1
 8000e74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7a:	4a58      	ldr	r2, [pc, #352]	; (8000fdc <ADC_Init+0x1f4>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d022      	beq.n	8000ec6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	6899      	ldr	r1, [r3, #8]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000eb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6899      	ldr	r1, [r3, #8]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	e00f      	b.n	8000ee6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ed4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ee4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f022 0202 	bic.w	r2, r2, #2
 8000ef4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	6899      	ldr	r1, [r3, #8]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	7e1b      	ldrb	r3, [r3, #24]
 8000f00:	005a      	lsls	r2, r3, #1
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	430a      	orrs	r2, r1
 8000f08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d01b      	beq.n	8000f4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	685a      	ldr	r2, [r3, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000f32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6859      	ldr	r1, [r3, #4]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	035a      	lsls	r2, r3, #13
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	430a      	orrs	r2, r1
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	e007      	b.n	8000f5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	051a      	lsls	r2, r3, #20
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6899      	ldr	r1, [r3, #8]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f9e:	025a      	lsls	r2, r3, #9
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	6899      	ldr	r1, [r3, #8]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	029a      	lsls	r2, r3, #10
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	609a      	str	r2, [r3, #8]
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	40012300 	.word	0x40012300
 8000fdc:	0f000001 	.word	0x0f000001

08000fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800100c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001012:	4a04      	ldr	r2, [pc, #16]	; (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	60d3      	str	r3, [r2, #12]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <__NVIC_GetPriorityGrouping+0x18>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	0a1b      	lsrs	r3, r3, #8
 8001032:	f003 0307 	and.w	r3, r3, #7
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	db0a      	blt.n	800106e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	b2da      	uxtb	r2, r3
 800105c:	490c      	ldr	r1, [pc, #48]	; (8001090 <__NVIC_SetPriority+0x4c>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	440b      	add	r3, r1
 8001068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800106c:	e00a      	b.n	8001084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4908      	ldr	r1, [pc, #32]	; (8001094 <__NVIC_SetPriority+0x50>)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	3b04      	subs	r3, #4
 800107c:	0112      	lsls	r2, r2, #4
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	440b      	add	r3, r1
 8001082:	761a      	strb	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000e100 	.word	0xe000e100
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf28      	it	cs
 80010b6:	2304      	movcs	r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d902      	bls.n	80010c8 <NVIC_EncodePriority+0x30>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3b03      	subs	r3, #3
 80010c6:	e000      	b.n	80010ca <NVIC_EncodePriority+0x32>
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43da      	mvns	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	401a      	ands	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	43d9      	mvns	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	4313      	orrs	r3, r2
         );
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3724      	adds	r7, #36	; 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001110:	d301      	bcc.n	8001116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001112:	2301      	movs	r3, #1
 8001114:	e00f      	b.n	8001136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <SysTick_Config+0x40>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111e:	210f      	movs	r1, #15
 8001120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001124:	f7ff ff8e 	bl	8001044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <SysTick_Config+0x40>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <SysTick_Config+0x40>)
 8001130:	2207      	movs	r2, #7
 8001132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	e000e010 	.word	0xe000e010

08001144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff47 	bl	8000fe0 <__NVIC_SetPriorityGrouping>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800116c:	f7ff ff5c 	bl	8001028 <__NVIC_GetPriorityGrouping>
 8001170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	6978      	ldr	r0, [r7, #20]
 8001178:	f7ff ff8e 	bl	8001098 <NVIC_EncodePriority>
 800117c:	4602      	mov	r2, r0
 800117e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff5d 	bl	8001044 <__NVIC_SetPriority>
}
 800118a:	bf00      	nop
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ffb0 	bl	8001100 <SysTick_Config>
 80011a0:	4603      	mov	r3, r0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
 80011c6:	e159      	b.n	800147c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011c8:	2201      	movs	r2, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	f040 8148 	bne.w	8001476 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d005      	beq.n	80011fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d130      	bne.n	8001260 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	2203      	movs	r2, #3
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001234:	2201      	movs	r2, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	091b      	lsrs	r3, r3, #4
 800124a:	f003 0201 	and.w	r2, r3, #1
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b03      	cmp	r3, #3
 800126a:	d017      	beq.n	800129c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	2203      	movs	r2, #3
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d123      	bne.n	80012f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	08da      	lsrs	r2, r3, #3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3208      	adds	r2, #8
 80012b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	f003 0307 	and.w	r3, r3, #7
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	220f      	movs	r2, #15
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	691a      	ldr	r2, [r3, #16]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	08da      	lsrs	r2, r3, #3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3208      	adds	r2, #8
 80012ea:	69b9      	ldr	r1, [r7, #24]
 80012ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	2203      	movs	r2, #3
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0203 	and.w	r2, r3, #3
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 80a2 	beq.w	8001476 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b57      	ldr	r3, [pc, #348]	; (8001494 <HAL_GPIO_Init+0x2e8>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	4a56      	ldr	r2, [pc, #344]	; (8001494 <HAL_GPIO_Init+0x2e8>)
 800133c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001340:	6453      	str	r3, [r2, #68]	; 0x44
 8001342:	4b54      	ldr	r3, [pc, #336]	; (8001494 <HAL_GPIO_Init+0x2e8>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800134e:	4a52      	ldr	r2, [pc, #328]	; (8001498 <HAL_GPIO_Init+0x2ec>)
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	3302      	adds	r3, #2
 8001356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	220f      	movs	r2, #15
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a49      	ldr	r2, [pc, #292]	; (800149c <HAL_GPIO_Init+0x2f0>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d019      	beq.n	80013ae <HAL_GPIO_Init+0x202>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a48      	ldr	r2, [pc, #288]	; (80014a0 <HAL_GPIO_Init+0x2f4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d013      	beq.n	80013aa <HAL_GPIO_Init+0x1fe>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a47      	ldr	r2, [pc, #284]	; (80014a4 <HAL_GPIO_Init+0x2f8>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d00d      	beq.n	80013a6 <HAL_GPIO_Init+0x1fa>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a46      	ldr	r2, [pc, #280]	; (80014a8 <HAL_GPIO_Init+0x2fc>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d007      	beq.n	80013a2 <HAL_GPIO_Init+0x1f6>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a45      	ldr	r2, [pc, #276]	; (80014ac <HAL_GPIO_Init+0x300>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d101      	bne.n	800139e <HAL_GPIO_Init+0x1f2>
 800139a:	2304      	movs	r3, #4
 800139c:	e008      	b.n	80013b0 <HAL_GPIO_Init+0x204>
 800139e:	2307      	movs	r3, #7
 80013a0:	e006      	b.n	80013b0 <HAL_GPIO_Init+0x204>
 80013a2:	2303      	movs	r3, #3
 80013a4:	e004      	b.n	80013b0 <HAL_GPIO_Init+0x204>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e002      	b.n	80013b0 <HAL_GPIO_Init+0x204>
 80013aa:	2301      	movs	r3, #1
 80013ac:	e000      	b.n	80013b0 <HAL_GPIO_Init+0x204>
 80013ae:	2300      	movs	r3, #0
 80013b0:	69fa      	ldr	r2, [r7, #28]
 80013b2:	f002 0203 	and.w	r2, r2, #3
 80013b6:	0092      	lsls	r2, r2, #2
 80013b8:	4093      	lsls	r3, r2
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c0:	4935      	ldr	r1, [pc, #212]	; (8001498 <HAL_GPIO_Init+0x2ec>)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	3302      	adds	r3, #2
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ce:	4b38      	ldr	r3, [pc, #224]	; (80014b0 <HAL_GPIO_Init+0x304>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013f2:	4a2f      	ldr	r2, [pc, #188]	; (80014b0 <HAL_GPIO_Init+0x304>)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013f8:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <HAL_GPIO_Init+0x304>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800141c:	4a24      	ldr	r2, [pc, #144]	; (80014b0 <HAL_GPIO_Init+0x304>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001422:	4b23      	ldr	r3, [pc, #140]	; (80014b0 <HAL_GPIO_Init+0x304>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001446:	4a1a      	ldr	r2, [pc, #104]	; (80014b0 <HAL_GPIO_Init+0x304>)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_GPIO_Init+0x304>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001470:	4a0f      	ldr	r2, [pc, #60]	; (80014b0 <HAL_GPIO_Init+0x304>)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3301      	adds	r3, #1
 800147a:	61fb      	str	r3, [r7, #28]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	2b0f      	cmp	r3, #15
 8001480:	f67f aea2 	bls.w	80011c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800
 8001498:	40013800 	.word	0x40013800
 800149c:	40020000 	.word	0x40020000
 80014a0:	40020400 	.word	0x40020400
 80014a4:	40020800 	.word	0x40020800
 80014a8:	40020c00 	.word	0x40020c00
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40013c00 	.word	0x40013c00

080014b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691a      	ldr	r2, [r3, #16]
 80014c4:	887b      	ldrh	r3, [r7, #2]
 80014c6:	4013      	ands	r3, r2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014cc:	2301      	movs	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	e001      	b.n	80014d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	807b      	strh	r3, [r7, #2]
 80014f0:	4613      	mov	r3, r2
 80014f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f4:	787b      	ldrb	r3, [r7, #1]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001500:	e003      	b.n	800150a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001502:	887b      	ldrh	r3, [r7, #2]
 8001504:	041a      	lsls	r2, r3, #16
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	619a      	str	r2, [r3, #24]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e267      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d075      	beq.n	8001622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001536:	4b88      	ldr	r3, [pc, #544]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b04      	cmp	r3, #4
 8001540:	d00c      	beq.n	800155c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001542:	4b85      	ldr	r3, [pc, #532]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800154a:	2b08      	cmp	r3, #8
 800154c:	d112      	bne.n	8001574 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800154e:	4b82      	ldr	r3, [pc, #520]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800155a:	d10b      	bne.n	8001574 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155c:	4b7e      	ldr	r3, [pc, #504]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d05b      	beq.n	8001620 <HAL_RCC_OscConfig+0x108>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d157      	bne.n	8001620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e242      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157c:	d106      	bne.n	800158c <HAL_RCC_OscConfig+0x74>
 800157e:	4b76      	ldr	r3, [pc, #472]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a75      	ldr	r2, [pc, #468]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e01d      	b.n	80015c8 <HAL_RCC_OscConfig+0xb0>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x98>
 8001596:	4b70      	ldr	r3, [pc, #448]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a6f      	ldr	r2, [pc, #444]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 800159c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	4b6d      	ldr	r3, [pc, #436]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a6c      	ldr	r2, [pc, #432]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e00b      	b.n	80015c8 <HAL_RCC_OscConfig+0xb0>
 80015b0:	4b69      	ldr	r3, [pc, #420]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a68      	ldr	r2, [pc, #416]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4b66      	ldr	r3, [pc, #408]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a65      	ldr	r2, [pc, #404]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d013      	beq.n	80015f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff fa98 	bl	8000b04 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d8:	f7ff fa94 	bl	8000b04 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b64      	cmp	r3, #100	; 0x64
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e207      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	4b5b      	ldr	r3, [pc, #364]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0xc0>
 80015f6:	e014      	b.n	8001622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fa84 	bl	8000b04 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff fa80 	bl	8000b04 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	; 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e1f3      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001612:	4b51      	ldr	r3, [pc, #324]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0xe8>
 800161e:	e000      	b.n	8001622 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d063      	beq.n	80016f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800162e:	4b4a      	ldr	r3, [pc, #296]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00b      	beq.n	8001652 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800163a:	4b47      	ldr	r3, [pc, #284]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001642:	2b08      	cmp	r3, #8
 8001644:	d11c      	bne.n	8001680 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001646:	4b44      	ldr	r3, [pc, #272]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d116      	bne.n	8001680 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001652:	4b41      	ldr	r3, [pc, #260]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d005      	beq.n	800166a <HAL_RCC_OscConfig+0x152>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d001      	beq.n	800166a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e1c7      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166a:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4937      	ldr	r1, [pc, #220]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167e:	e03a      	b.n	80016f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d020      	beq.n	80016ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001688:	4b34      	ldr	r3, [pc, #208]	; (800175c <HAL_RCC_OscConfig+0x244>)
 800168a:	2201      	movs	r2, #1
 800168c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168e:	f7ff fa39 	bl	8000b04 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001696:	f7ff fa35 	bl	8000b04 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e1a8      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a8:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4925      	ldr	r1, [pc, #148]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	600b      	str	r3, [r1, #0]
 80016c8:	e015      	b.n	80016f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ca:	4b24      	ldr	r3, [pc, #144]	; (800175c <HAL_RCC_OscConfig+0x244>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fa18 	bl	8000b04 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d8:	f7ff fa14 	bl	8000b04 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e187      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ea:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d036      	beq.n	8001770 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d016      	beq.n	8001738 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_RCC_OscConfig+0x248>)
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001710:	f7ff f9f8 	bl	8000b04 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001718:	f7ff f9f4 	bl	8000b04 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e167      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 800172c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0x200>
 8001736:	e01b      	b.n	8001770 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_RCC_OscConfig+0x248>)
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173e:	f7ff f9e1 	bl	8000b04 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001744:	e00e      	b.n	8001764 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001746:	f7ff f9dd 	bl	8000b04 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d907      	bls.n	8001764 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e150      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
 8001758:	40023800 	.word	0x40023800
 800175c:	42470000 	.word	0x42470000
 8001760:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001764:	4b88      	ldr	r3, [pc, #544]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1ea      	bne.n	8001746 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 8097 	beq.w	80018ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800177e:	2300      	movs	r3, #0
 8001780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001782:	4b81      	ldr	r3, [pc, #516]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10f      	bne.n	80017ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	4b7d      	ldr	r3, [pc, #500]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	4a7c      	ldr	r2, [pc, #496]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
 800179e:	4b7a      	ldr	r3, [pc, #488]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017aa:	2301      	movs	r3, #1
 80017ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ae:	4b77      	ldr	r3, [pc, #476]	; (800198c <HAL_RCC_OscConfig+0x474>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d118      	bne.n	80017ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ba:	4b74      	ldr	r3, [pc, #464]	; (800198c <HAL_RCC_OscConfig+0x474>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a73      	ldr	r2, [pc, #460]	; (800198c <HAL_RCC_OscConfig+0x474>)
 80017c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c6:	f7ff f99d 	bl	8000b04 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ce:	f7ff f999 	bl	8000b04 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e10c      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	4b6a      	ldr	r3, [pc, #424]	; (800198c <HAL_RCC_OscConfig+0x474>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x2ea>
 80017f4:	4b64      	ldr	r3, [pc, #400]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80017f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f8:	4a63      	ldr	r2, [pc, #396]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001800:	e01c      	b.n	800183c <HAL_RCC_OscConfig+0x324>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b05      	cmp	r3, #5
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0x30c>
 800180a:	4b5f      	ldr	r3, [pc, #380]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180e:	4a5e      	ldr	r2, [pc, #376]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	6713      	str	r3, [r2, #112]	; 0x70
 8001816:	4b5c      	ldr	r3, [pc, #368]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181a:	4a5b      	ldr	r2, [pc, #364]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6713      	str	r3, [r2, #112]	; 0x70
 8001822:	e00b      	b.n	800183c <HAL_RCC_OscConfig+0x324>
 8001824:	4b58      	ldr	r3, [pc, #352]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001828:	4a57      	ldr	r2, [pc, #348]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 800182a:	f023 0301 	bic.w	r3, r3, #1
 800182e:	6713      	str	r3, [r2, #112]	; 0x70
 8001830:	4b55      	ldr	r3, [pc, #340]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001834:	4a54      	ldr	r2, [pc, #336]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001836:	f023 0304 	bic.w	r3, r3, #4
 800183a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d015      	beq.n	8001870 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001844:	f7ff f95e 	bl	8000b04 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800184a:	e00a      	b.n	8001862 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800184c:	f7ff f95a 	bl	8000b04 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	; 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e0cb      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001862:	4b49      	ldr	r3, [pc, #292]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0ee      	beq.n	800184c <HAL_RCC_OscConfig+0x334>
 800186e:	e014      	b.n	800189a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001870:	f7ff f948 	bl	8000b04 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001876:	e00a      	b.n	800188e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001878:	f7ff f944 	bl	8000b04 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f241 3288 	movw	r2, #5000	; 0x1388
 8001886:	4293      	cmp	r3, r2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e0b5      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800188e:	4b3e      	ldr	r3, [pc, #248]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1ee      	bne.n	8001878 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800189a:	7dfb      	ldrb	r3, [r7, #23]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d105      	bne.n	80018ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a0:	4b39      	ldr	r3, [pc, #228]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	4a38      	ldr	r2, [pc, #224]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80018a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 80a1 	beq.w	80019f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018b6:	4b34      	ldr	r3, [pc, #208]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d05c      	beq.n	800197c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d141      	bne.n	800194e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ca:	4b31      	ldr	r3, [pc, #196]	; (8001990 <HAL_RCC_OscConfig+0x478>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff f918 	bl	8000b04 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d8:	f7ff f914 	bl	8000b04 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e087      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ea:	4b27      	ldr	r3, [pc, #156]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69da      	ldr	r2, [r3, #28]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	019b      	lsls	r3, r3, #6
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	085b      	lsrs	r3, r3, #1
 800190e:	3b01      	subs	r3, #1
 8001910:	041b      	lsls	r3, r3, #16
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	061b      	lsls	r3, r3, #24
 800191a:	491b      	ldr	r1, [pc, #108]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <HAL_RCC_OscConfig+0x478>)
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7ff f8ed 	bl	8000b04 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192e:	f7ff f8e9 	bl	8000b04 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e05c      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x416>
 800194c:	e054      	b.n	80019f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <HAL_RCC_OscConfig+0x478>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff f8d6 	bl	8000b04 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff f8d2 	bl	8000b04 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e045      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x444>
 800197a:	e03d      	b.n	80019f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d107      	bne.n	8001994 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e038      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
 8001988:	40023800 	.word	0x40023800
 800198c:	40007000 	.word	0x40007000
 8001990:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_RCC_OscConfig+0x4ec>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d028      	beq.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d121      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d11a      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019c4:	4013      	ands	r3, r2
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d111      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019da:	085b      	lsrs	r3, r3, #1
 80019dc:	3b01      	subs	r3, #1
 80019de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800

08001a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0cc      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b68      	ldr	r3, [pc, #416]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d90c      	bls.n	8001a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b65      	ldr	r3, [pc, #404]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b63      	ldr	r3, [pc, #396]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0b8      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d020      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a5c:	4b59      	ldr	r3, [pc, #356]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	4a58      	ldr	r2, [pc, #352]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a74:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	4a52      	ldr	r2, [pc, #328]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a80:	4b50      	ldr	r3, [pc, #320]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	494d      	ldr	r1, [pc, #308]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d044      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	4b47      	ldr	r3, [pc, #284]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d119      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e07f      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d003      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac6:	4b3f      	ldr	r3, [pc, #252]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e06f      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad6:	4b3b      	ldr	r3, [pc, #236]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e067      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ae6:	4b37      	ldr	r3, [pc, #220]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f023 0203 	bic.w	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4934      	ldr	r1, [pc, #208]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af8:	f7ff f804 	bl	8000b04 <HAL_GetTick>
 8001afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b00:	f7ff f800 	bl	8000b04 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e04f      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b16:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 020c 	and.w	r2, r3, #12
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d1eb      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b28:	4b25      	ldr	r3, [pc, #148]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d20c      	bcs.n	8001b50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e032      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d008      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b5c:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	4916      	ldr	r1, [pc, #88]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d009      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	490e      	ldr	r1, [pc, #56]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b8e:	f000 f821 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 8001b92:	4602      	mov	r2, r0
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	490a      	ldr	r1, [pc, #40]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba0:	5ccb      	ldrb	r3, [r1, r3]
 8001ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba6:	4a09      	ldr	r2, [pc, #36]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe ff64 	bl	8000a7c <HAL_InitTick>

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023c00 	.word	0x40023c00
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	0800243c 	.word	0x0800243c
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	20000004 	.word	0x20000004

08001bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bd8:	b094      	sub	sp, #80	; 0x50
 8001bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	647b      	str	r3, [r7, #68]	; 0x44
 8001be0:	2300      	movs	r3, #0
 8001be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001be4:	2300      	movs	r3, #0
 8001be6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bec:	4b79      	ldr	r3, [pc, #484]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d00d      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0x40>
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	f200 80e1 	bhi.w	8001dc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <HAL_RCC_GetSysClockFreq+0x34>
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d003      	beq.n	8001c0e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c06:	e0db      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c08:	4b73      	ldr	r3, [pc, #460]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c0c:	e0db      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c0e:	4b73      	ldr	r3, [pc, #460]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x208>)
 8001c10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c12:	e0d8      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c14:	4b6f      	ldr	r3, [pc, #444]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c1e:	4b6d      	ldr	r3, [pc, #436]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d063      	beq.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2a:	4b6a      	ldr	r3, [pc, #424]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	099b      	lsrs	r3, r3, #6
 8001c30:	2200      	movs	r2, #0
 8001c32:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c3c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c3e:	2300      	movs	r3, #0
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34
 8001c42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c46:	4622      	mov	r2, r4
 8001c48:	462b      	mov	r3, r5
 8001c4a:	f04f 0000 	mov.w	r0, #0
 8001c4e:	f04f 0100 	mov.w	r1, #0
 8001c52:	0159      	lsls	r1, r3, #5
 8001c54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c58:	0150      	lsls	r0, r2, #5
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4621      	mov	r1, r4
 8001c60:	1a51      	subs	r1, r2, r1
 8001c62:	6139      	str	r1, [r7, #16]
 8001c64:	4629      	mov	r1, r5
 8001c66:	eb63 0301 	sbc.w	r3, r3, r1
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c78:	4659      	mov	r1, fp
 8001c7a:	018b      	lsls	r3, r1, #6
 8001c7c:	4651      	mov	r1, sl
 8001c7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c82:	4651      	mov	r1, sl
 8001c84:	018a      	lsls	r2, r1, #6
 8001c86:	4651      	mov	r1, sl
 8001c88:	ebb2 0801 	subs.w	r8, r2, r1
 8001c8c:	4659      	mov	r1, fp
 8001c8e:	eb63 0901 	sbc.w	r9, r3, r1
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ca2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ca6:	4690      	mov	r8, r2
 8001ca8:	4699      	mov	r9, r3
 8001caa:	4623      	mov	r3, r4
 8001cac:	eb18 0303 	adds.w	r3, r8, r3
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	462b      	mov	r3, r5
 8001cb4:	eb49 0303 	adc.w	r3, r9, r3
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cc6:	4629      	mov	r1, r5
 8001cc8:	024b      	lsls	r3, r1, #9
 8001cca:	4621      	mov	r1, r4
 8001ccc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	024a      	lsls	r2, r1, #9
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cda:	2200      	movs	r2, #0
 8001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ce0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ce4:	f7fe fa76 	bl	80001d4 <__aeabi_uldivmod>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4613      	mov	r3, r2
 8001cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cf0:	e058      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf2:	4b38      	ldr	r3, [pc, #224]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	099b      	lsrs	r3, r3, #6
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d02:	623b      	str	r3, [r7, #32]
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
 8001d08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d0c:	4642      	mov	r2, r8
 8001d0e:	464b      	mov	r3, r9
 8001d10:	f04f 0000 	mov.w	r0, #0
 8001d14:	f04f 0100 	mov.w	r1, #0
 8001d18:	0159      	lsls	r1, r3, #5
 8001d1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d1e:	0150      	lsls	r0, r2, #5
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4641      	mov	r1, r8
 8001d26:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d2a:	4649      	mov	r1, r9
 8001d2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d44:	ebb2 040a 	subs.w	r4, r2, sl
 8001d48:	eb63 050b 	sbc.w	r5, r3, fp
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	00eb      	lsls	r3, r5, #3
 8001d56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d5a:	00e2      	lsls	r2, r4, #3
 8001d5c:	4614      	mov	r4, r2
 8001d5e:	461d      	mov	r5, r3
 8001d60:	4643      	mov	r3, r8
 8001d62:	18e3      	adds	r3, r4, r3
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	464b      	mov	r3, r9
 8001d68:	eb45 0303 	adc.w	r3, r5, r3
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	028b      	lsls	r3, r1, #10
 8001d7e:	4621      	mov	r1, r4
 8001d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d84:	4621      	mov	r1, r4
 8001d86:	028a      	lsls	r2, r1, #10
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	61fa      	str	r2, [r7, #28]
 8001d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d98:	f7fe fa1c 	bl	80001d4 <__aeabi_uldivmod>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4613      	mov	r3, r2
 8001da2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	0c1b      	lsrs	r3, r3, #16
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	3301      	adds	r3, #1
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001db4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dbe:	e002      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3750      	adds	r7, #80	; 0x50
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	00f42400 	.word	0x00f42400
 8001ddc:	007a1200 	.word	0x007a1200

08001de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000000 	.word	0x20000000

08001df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dfc:	f7ff fff0 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001e00:	4602      	mov	r2, r0
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	0a9b      	lsrs	r3, r3, #10
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	4903      	ldr	r1, [pc, #12]	; (8001e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e0e:	5ccb      	ldrb	r3, [r1, r3]
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	0800244c 	.word	0x0800244c

08001e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e24:	f7ff ffdc 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	0b5b      	lsrs	r3, r3, #13
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	4903      	ldr	r1, [pc, #12]	; (8001e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e36:	5ccb      	ldrb	r3, [r1, r3]
 8001e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40023800 	.word	0x40023800
 8001e44:	0800244c 	.word	0x0800244c

08001e48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e03f      	b.n	8001eda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d106      	bne.n	8001e74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7fe fd34 	bl	80008dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2224      	movs	r2, #36	; 0x24
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f829 	bl	8001ee4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ea0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695a      	ldr	r2, [r3, #20]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001eb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ec0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ee8:	b0c0      	sub	sp, #256	; 0x100
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f00:	68d9      	ldr	r1, [r3, #12]
 8001f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	ea40 0301 	orr.w	r3, r0, r1
 8001f0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	431a      	orrs	r2, r3
 8001f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001f3c:	f021 010c 	bic.w	r1, r1, #12
 8001f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f4a:	430b      	orrs	r3, r1
 8001f4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f5e:	6999      	ldr	r1, [r3, #24]
 8001f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	ea40 0301 	orr.w	r3, r0, r1
 8001f6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	4b8f      	ldr	r3, [pc, #572]	; (80021b0 <UART_SetConfig+0x2cc>)
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d005      	beq.n	8001f84 <UART_SetConfig+0xa0>
 8001f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	4b8d      	ldr	r3, [pc, #564]	; (80021b4 <UART_SetConfig+0x2d0>)
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d104      	bne.n	8001f8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f84:	f7ff ff4c 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 8001f88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001f8c:	e003      	b.n	8001f96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f8e:	f7ff ff33 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 8001f92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fa0:	f040 810c 	bne.w	80021bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001fae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001fb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001fb6:	4622      	mov	r2, r4
 8001fb8:	462b      	mov	r3, r5
 8001fba:	1891      	adds	r1, r2, r2
 8001fbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8001fbe:	415b      	adcs	r3, r3
 8001fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001fc6:	4621      	mov	r1, r4
 8001fc8:	eb12 0801 	adds.w	r8, r2, r1
 8001fcc:	4629      	mov	r1, r5
 8001fce:	eb43 0901 	adc.w	r9, r3, r1
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fe2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fe6:	4690      	mov	r8, r2
 8001fe8:	4699      	mov	r9, r3
 8001fea:	4623      	mov	r3, r4
 8001fec:	eb18 0303 	adds.w	r3, r8, r3
 8001ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001ff4:	462b      	mov	r3, r5
 8001ff6:	eb49 0303 	adc.w	r3, r9, r3
 8001ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800200a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800200e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002012:	460b      	mov	r3, r1
 8002014:	18db      	adds	r3, r3, r3
 8002016:	653b      	str	r3, [r7, #80]	; 0x50
 8002018:	4613      	mov	r3, r2
 800201a:	eb42 0303 	adc.w	r3, r2, r3
 800201e:	657b      	str	r3, [r7, #84]	; 0x54
 8002020:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002024:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002028:	f7fe f8d4 	bl	80001d4 <__aeabi_uldivmod>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4b61      	ldr	r3, [pc, #388]	; (80021b8 <UART_SetConfig+0x2d4>)
 8002032:	fba3 2302 	umull	r2, r3, r3, r2
 8002036:	095b      	lsrs	r3, r3, #5
 8002038:	011c      	lsls	r4, r3, #4
 800203a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800203e:	2200      	movs	r2, #0
 8002040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002044:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002048:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800204c:	4642      	mov	r2, r8
 800204e:	464b      	mov	r3, r9
 8002050:	1891      	adds	r1, r2, r2
 8002052:	64b9      	str	r1, [r7, #72]	; 0x48
 8002054:	415b      	adcs	r3, r3
 8002056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002058:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800205c:	4641      	mov	r1, r8
 800205e:	eb12 0a01 	adds.w	sl, r2, r1
 8002062:	4649      	mov	r1, r9
 8002064:	eb43 0b01 	adc.w	fp, r3, r1
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	f04f 0300 	mov.w	r3, #0
 8002070:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002074:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002078:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800207c:	4692      	mov	sl, r2
 800207e:	469b      	mov	fp, r3
 8002080:	4643      	mov	r3, r8
 8002082:	eb1a 0303 	adds.w	r3, sl, r3
 8002086:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800208a:	464b      	mov	r3, r9
 800208c:	eb4b 0303 	adc.w	r3, fp, r3
 8002090:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80020a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80020a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80020a8:	460b      	mov	r3, r1
 80020aa:	18db      	adds	r3, r3, r3
 80020ac:	643b      	str	r3, [r7, #64]	; 0x40
 80020ae:	4613      	mov	r3, r2
 80020b0:	eb42 0303 	adc.w	r3, r2, r3
 80020b4:	647b      	str	r3, [r7, #68]	; 0x44
 80020b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80020ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80020be:	f7fe f889 	bl	80001d4 <__aeabi_uldivmod>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4611      	mov	r1, r2
 80020c8:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <UART_SetConfig+0x2d4>)
 80020ca:	fba3 2301 	umull	r2, r3, r3, r1
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	2264      	movs	r2, #100	; 0x64
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
 80020d6:	1acb      	subs	r3, r1, r3
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80020de:	4b36      	ldr	r3, [pc, #216]	; (80021b8 <UART_SetConfig+0x2d4>)
 80020e0:	fba3 2302 	umull	r2, r3, r3, r2
 80020e4:	095b      	lsrs	r3, r3, #5
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020ec:	441c      	add	r4, r3
 80020ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020f2:	2200      	movs	r2, #0
 80020f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80020fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002100:	4642      	mov	r2, r8
 8002102:	464b      	mov	r3, r9
 8002104:	1891      	adds	r1, r2, r2
 8002106:	63b9      	str	r1, [r7, #56]	; 0x38
 8002108:	415b      	adcs	r3, r3
 800210a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800210c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002110:	4641      	mov	r1, r8
 8002112:	1851      	adds	r1, r2, r1
 8002114:	6339      	str	r1, [r7, #48]	; 0x30
 8002116:	4649      	mov	r1, r9
 8002118:	414b      	adcs	r3, r1
 800211a:	637b      	str	r3, [r7, #52]	; 0x34
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002128:	4659      	mov	r1, fp
 800212a:	00cb      	lsls	r3, r1, #3
 800212c:	4651      	mov	r1, sl
 800212e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002132:	4651      	mov	r1, sl
 8002134:	00ca      	lsls	r2, r1, #3
 8002136:	4610      	mov	r0, r2
 8002138:	4619      	mov	r1, r3
 800213a:	4603      	mov	r3, r0
 800213c:	4642      	mov	r2, r8
 800213e:	189b      	adds	r3, r3, r2
 8002140:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002144:	464b      	mov	r3, r9
 8002146:	460a      	mov	r2, r1
 8002148:	eb42 0303 	adc.w	r3, r2, r3
 800214c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800215c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002160:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002164:	460b      	mov	r3, r1
 8002166:	18db      	adds	r3, r3, r3
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
 800216a:	4613      	mov	r3, r2
 800216c:	eb42 0303 	adc.w	r3, r2, r3
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002172:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002176:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800217a:	f7fe f82b 	bl	80001d4 <__aeabi_uldivmod>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <UART_SetConfig+0x2d4>)
 8002184:	fba3 1302 	umull	r1, r3, r3, r2
 8002188:	095b      	lsrs	r3, r3, #5
 800218a:	2164      	movs	r1, #100	; 0x64
 800218c:	fb01 f303 	mul.w	r3, r1, r3
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	3332      	adds	r3, #50	; 0x32
 8002196:	4a08      	ldr	r2, [pc, #32]	; (80021b8 <UART_SetConfig+0x2d4>)
 8002198:	fba2 2303 	umull	r2, r3, r2, r3
 800219c:	095b      	lsrs	r3, r3, #5
 800219e:	f003 0207 	and.w	r2, r3, #7
 80021a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4422      	add	r2, r4
 80021aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80021ac:	e106      	b.n	80023bc <UART_SetConfig+0x4d8>
 80021ae:	bf00      	nop
 80021b0:	40011000 	.word	0x40011000
 80021b4:	40011400 	.word	0x40011400
 80021b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021c0:	2200      	movs	r2, #0
 80021c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80021c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80021ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80021ce:	4642      	mov	r2, r8
 80021d0:	464b      	mov	r3, r9
 80021d2:	1891      	adds	r1, r2, r2
 80021d4:	6239      	str	r1, [r7, #32]
 80021d6:	415b      	adcs	r3, r3
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
 80021da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021de:	4641      	mov	r1, r8
 80021e0:	1854      	adds	r4, r2, r1
 80021e2:	4649      	mov	r1, r9
 80021e4:	eb43 0501 	adc.w	r5, r3, r1
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	00eb      	lsls	r3, r5, #3
 80021f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021f6:	00e2      	lsls	r2, r4, #3
 80021f8:	4614      	mov	r4, r2
 80021fa:	461d      	mov	r5, r3
 80021fc:	4643      	mov	r3, r8
 80021fe:	18e3      	adds	r3, r4, r3
 8002200:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002204:	464b      	mov	r3, r9
 8002206:	eb45 0303 	adc.w	r3, r5, r3
 800220a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800220e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800221a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800222a:	4629      	mov	r1, r5
 800222c:	008b      	lsls	r3, r1, #2
 800222e:	4621      	mov	r1, r4
 8002230:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002234:	4621      	mov	r1, r4
 8002236:	008a      	lsls	r2, r1, #2
 8002238:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800223c:	f7fd ffca 	bl	80001d4 <__aeabi_uldivmod>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4b60      	ldr	r3, [pc, #384]	; (80023c8 <UART_SetConfig+0x4e4>)
 8002246:	fba3 2302 	umull	r2, r3, r3, r2
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	011c      	lsls	r4, r3, #4
 800224e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002252:	2200      	movs	r2, #0
 8002254:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002258:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800225c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002260:	4642      	mov	r2, r8
 8002262:	464b      	mov	r3, r9
 8002264:	1891      	adds	r1, r2, r2
 8002266:	61b9      	str	r1, [r7, #24]
 8002268:	415b      	adcs	r3, r3
 800226a:	61fb      	str	r3, [r7, #28]
 800226c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002270:	4641      	mov	r1, r8
 8002272:	1851      	adds	r1, r2, r1
 8002274:	6139      	str	r1, [r7, #16]
 8002276:	4649      	mov	r1, r9
 8002278:	414b      	adcs	r3, r1
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002288:	4659      	mov	r1, fp
 800228a:	00cb      	lsls	r3, r1, #3
 800228c:	4651      	mov	r1, sl
 800228e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002292:	4651      	mov	r1, sl
 8002294:	00ca      	lsls	r2, r1, #3
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	4603      	mov	r3, r0
 800229c:	4642      	mov	r2, r8
 800229e:	189b      	adds	r3, r3, r2
 80022a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022a4:	464b      	mov	r3, r9
 80022a6:	460a      	mov	r2, r1
 80022a8:	eb42 0303 	adc.w	r3, r2, r3
 80022ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80022b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80022ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80022c8:	4649      	mov	r1, r9
 80022ca:	008b      	lsls	r3, r1, #2
 80022cc:	4641      	mov	r1, r8
 80022ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022d2:	4641      	mov	r1, r8
 80022d4:	008a      	lsls	r2, r1, #2
 80022d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80022da:	f7fd ff7b 	bl	80001d4 <__aeabi_uldivmod>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4611      	mov	r1, r2
 80022e4:	4b38      	ldr	r3, [pc, #224]	; (80023c8 <UART_SetConfig+0x4e4>)
 80022e6:	fba3 2301 	umull	r2, r3, r3, r1
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	2264      	movs	r2, #100	; 0x64
 80022ee:	fb02 f303 	mul.w	r3, r2, r3
 80022f2:	1acb      	subs	r3, r1, r3
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	3332      	adds	r3, #50	; 0x32
 80022f8:	4a33      	ldr	r2, [pc, #204]	; (80023c8 <UART_SetConfig+0x4e4>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002304:	441c      	add	r4, r3
 8002306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800230a:	2200      	movs	r2, #0
 800230c:	673b      	str	r3, [r7, #112]	; 0x70
 800230e:	677a      	str	r2, [r7, #116]	; 0x74
 8002310:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002314:	4642      	mov	r2, r8
 8002316:	464b      	mov	r3, r9
 8002318:	1891      	adds	r1, r2, r2
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	415b      	adcs	r3, r3
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002324:	4641      	mov	r1, r8
 8002326:	1851      	adds	r1, r2, r1
 8002328:	6039      	str	r1, [r7, #0]
 800232a:	4649      	mov	r1, r9
 800232c:	414b      	adcs	r3, r1
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800233c:	4659      	mov	r1, fp
 800233e:	00cb      	lsls	r3, r1, #3
 8002340:	4651      	mov	r1, sl
 8002342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002346:	4651      	mov	r1, sl
 8002348:	00ca      	lsls	r2, r1, #3
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	4603      	mov	r3, r0
 8002350:	4642      	mov	r2, r8
 8002352:	189b      	adds	r3, r3, r2
 8002354:	66bb      	str	r3, [r7, #104]	; 0x68
 8002356:	464b      	mov	r3, r9
 8002358:	460a      	mov	r2, r1
 800235a:	eb42 0303 	adc.w	r3, r2, r3
 800235e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	663b      	str	r3, [r7, #96]	; 0x60
 800236a:	667a      	str	r2, [r7, #100]	; 0x64
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002378:	4649      	mov	r1, r9
 800237a:	008b      	lsls	r3, r1, #2
 800237c:	4641      	mov	r1, r8
 800237e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002382:	4641      	mov	r1, r8
 8002384:	008a      	lsls	r2, r1, #2
 8002386:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800238a:	f7fd ff23 	bl	80001d4 <__aeabi_uldivmod>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <UART_SetConfig+0x4e4>)
 8002394:	fba3 1302 	umull	r1, r3, r3, r2
 8002398:	095b      	lsrs	r3, r3, #5
 800239a:	2164      	movs	r1, #100	; 0x64
 800239c:	fb01 f303 	mul.w	r3, r1, r3
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	3332      	adds	r3, #50	; 0x32
 80023a6:	4a08      	ldr	r2, [pc, #32]	; (80023c8 <UART_SetConfig+0x4e4>)
 80023a8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ac:	095b      	lsrs	r3, r3, #5
 80023ae:	f003 020f 	and.w	r2, r3, #15
 80023b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4422      	add	r2, r4
 80023ba:	609a      	str	r2, [r3, #8]
}
 80023bc:	bf00      	nop
 80023be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80023c2:	46bd      	mov	sp, r7
 80023c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023c8:	51eb851f 	.word	0x51eb851f

080023cc <memset>:
 80023cc:	4402      	add	r2, r0
 80023ce:	4603      	mov	r3, r0
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d100      	bne.n	80023d6 <memset+0xa>
 80023d4:	4770      	bx	lr
 80023d6:	f803 1b01 	strb.w	r1, [r3], #1
 80023da:	e7f9      	b.n	80023d0 <memset+0x4>

080023dc <__libc_init_array>:
 80023dc:	b570      	push	{r4, r5, r6, lr}
 80023de:	4d0d      	ldr	r5, [pc, #52]	; (8002414 <__libc_init_array+0x38>)
 80023e0:	4c0d      	ldr	r4, [pc, #52]	; (8002418 <__libc_init_array+0x3c>)
 80023e2:	1b64      	subs	r4, r4, r5
 80023e4:	10a4      	asrs	r4, r4, #2
 80023e6:	2600      	movs	r6, #0
 80023e8:	42a6      	cmp	r6, r4
 80023ea:	d109      	bne.n	8002400 <__libc_init_array+0x24>
 80023ec:	4d0b      	ldr	r5, [pc, #44]	; (800241c <__libc_init_array+0x40>)
 80023ee:	4c0c      	ldr	r4, [pc, #48]	; (8002420 <__libc_init_array+0x44>)
 80023f0:	f000 f818 	bl	8002424 <_init>
 80023f4:	1b64      	subs	r4, r4, r5
 80023f6:	10a4      	asrs	r4, r4, #2
 80023f8:	2600      	movs	r6, #0
 80023fa:	42a6      	cmp	r6, r4
 80023fc:	d105      	bne.n	800240a <__libc_init_array+0x2e>
 80023fe:	bd70      	pop	{r4, r5, r6, pc}
 8002400:	f855 3b04 	ldr.w	r3, [r5], #4
 8002404:	4798      	blx	r3
 8002406:	3601      	adds	r6, #1
 8002408:	e7ee      	b.n	80023e8 <__libc_init_array+0xc>
 800240a:	f855 3b04 	ldr.w	r3, [r5], #4
 800240e:	4798      	blx	r3
 8002410:	3601      	adds	r6, #1
 8002412:	e7f2      	b.n	80023fa <__libc_init_array+0x1e>
 8002414:	0800245c 	.word	0x0800245c
 8002418:	0800245c 	.word	0x0800245c
 800241c:	0800245c 	.word	0x0800245c
 8002420:	08002460 	.word	0x08002460

08002424 <_init>:
 8002424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002426:	bf00      	nop
 8002428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800242a:	bc08      	pop	{r3}
 800242c:	469e      	mov	lr, r3
 800242e:	4770      	bx	lr

08002430 <_fini>:
 8002430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002432:	bf00      	nop
 8002434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002436:	bc08      	pop	{r3}
 8002438:	469e      	mov	lr, r3
 800243a:	4770      	bx	lr
